{"version":3,"sources":["components/lists/Groups.module.scss","components/lists/Names.module.scss","components/randomizers/Randomizer.module.scss","pages/random-group/RandomGroup.module.scss","pages/home/Home.module.scss","pages/random-name/RandomName.module.scss","pages/manage-groups/ManageGroups.module.scss","pages/404/NotFound.tsx","pages/home/Home.tsx","components/forms/TempNameForm.tsx","components/lists/NameItem.tsx","components/lists/NameList.tsx","components/lists/GroupItem.tsx","components/lists/GroupList.tsx","helpers/groupHelpers.ts","components/randomizers/NameRandomizer.tsx","pages/random-name/RandomName.tsx","components/lists/RandomGroupList.tsx","components/randomizers/GroupRandomizer.tsx","pages/random-group/RandomGroups.tsx","components/forms/GroupForm.tsx","components/forms/NameForm.tsx","components/lists/NameItemAdmin.tsx","components/lists/NameListAdmin.tsx","components/lists/GroupItemAdmin.tsx","components/lists/GroupListAdmin.tsx","pages/manage-groups/ManageGroups.tsx","pages/tutorial/Tutorial.tsx","router/Router.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","NotFound","to","Home","className","styles","home","TempNameForm","submitName","useState","name","setName","onSubmit","e","preventDefault","htmlFor","type","id","value","onChange","target","NameItem","variant","person","NameList","people","length","map","GroupItem","group","showNames","chooseGroup","isOpen","setIsOpen","useEffect","groupName","onClick","GroupList","groups","sanitizedGroupName","trim","Error","uuidv4","groupID","newPerson","sanitizedName","createPerson","NameRandomizer","names","randomName","setRandomName","remainingNames","setRemainingNames","isUniqueOnly","setIsUniqueOnly","nameRandomizer","chosenName","randomIndex","Math","floor","random","updatedRemainingNames","filter","checked","emptyGroup","RandomName","setGroups","chosenGroup","setChosenGroup","tempGroup","setTempGroup","isTempGroup","setIsTempGroup","groupsInStorage","localStorage","getItem","JSON","parse","setItem","stringify","tempGroupInStorage","specificGroup","RandomGroupList","randomGroups","randomGroupsList","index","groupCard","groupMemberList","GroupRandomizer","updateGroupSize","groupSize","setGroupSize","showError","setShowError","errorMessage","setErrorMessage","groupRandomizer","Number","alert","required","RandomGroups","setRandomGroups","getRandomGroups","size","randomArray","array","currentIndex","shuffleArray","randomGroupsArray","push","newGroup","splice","randomGroup","groupSelectionArea","GroupForm","submitGroup","setGroupName","NameForm","assignedGroupID","setAssignedGroupID","NameItemAdmin","deleteNameFromGroup","nameItemAdmin","deleteIcon","NameListAdmin","nameListAdmin","GroupItemAdmin","deleteGroup","groupItemAdmin","groupHeader","GroupListAdmin","groupListAdmin","createGroup","helpers","addPersonToGroup","ManageGroups","manageGroups","updatedGroups","newGroups","removeItem","nameID","newPeople","Tutorial","Router","path","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3c4d66cb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"groupList__default\":\"Groups_groupList__default__1sS_d\",\"groupItem__default\":\"Groups_groupItem__default__1sSx_\",\"randomGroups\":\"Groups_randomGroups__3_UFT\",\"randomGroupsList\":\"Groups_randomGroupsList__3vtMA\",\"groupCard\":\"Groups_groupCard__1xGxY\",\"groupMemberList\":\"Groups_groupMemberList__26otq\",\"groupListAdmin\":\"Groups_groupListAdmin__AE_BX\",\"groupItemAdmin\":\"Groups_groupItemAdmin__1IQ_c\",\"groupHeader\":\"Groups_groupHeader__HnX0F\",\"deleteIcon\":\"Groups_deleteIcon__2613X\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"nameList__default\":\"Names_nameList__default__2ZBkz\",\"nameList__chosenGroup\":\"Names_nameList__chosenGroup__3fIid\",\"nameItem__default\":\"Names_nameItem__default__28dNH\",\"nameItem__chosenGroup\":\"Names_nameItem__chosenGroup__H8pAq\",\"nameListAdmin\":\"Names_nameListAdmin__1DUUw\",\"nameItemAdmin\":\"Names_nameItemAdmin__1E7mD\",\"deleteIcon\":\"Names_deleteIcon__1txbP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"groupRandomizer\":\"Randomizer_groupRandomizer__3-nmz\",\"nameRandomizer\":\"Randomizer_nameRandomizer__1LQa-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"randomGroup\":\"RandomGroup_randomGroup__J0VMU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"home\":\"Home_home__1aHO-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"randomName\":\"RandomName_randomName__3LTHO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"manageGroups\":\"ManageGroups_manageGroups__1awM6\",\"errorMessage\":\"ManageGroups_errorMessage__2bSwH\"};","import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nfunction NotFound() {\n  return (\n    <div>\n      <h1>404 - Page not found</h1>\n      <Link to=\"/\">Back Home</Link>\n    </div>\n  );\n}\n\nexport default NotFound;\n","import React from 'react';\n\nimport { Link } from 'react-router-dom';\nimport styles from './Home.module.scss';\n\nfunction Home() {\n  return (\n    <div className={styles.home}>\n      <h1>RANDOMIZE</h1>\n      <ul>\n        <Link to=\"/random-groups\">\n          <li>Random Groups</li>\n        </Link>\n\n        <Link to=\"/random-name\">\n          <li>Random Name</li>\n        </Link>\n\n        <Link to=\"/manage-groups\">\n          <li>Manage Groups</li>\n        </Link>\n\n        <Link to=\"/how-it-works\">\n          <li>How it works</li>\n        </Link>\n      </ul>\n    </div>\n  );\n}\n\nexport default Home;\n","import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface IProps {\n  submitName: (name: string) => void;\n}\n\nfunction TempNameForm({ submitName }: IProps) {\n  const [name, setName] = useState<string>('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    submitName(name);\n    setName('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">\n        Name\n        <input type=\"text\" name=\"name\" id=\"name\" value={name} onChange={handleChange} />\n      </label>\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default TempNameForm;\n","import React from 'react';\nimport { IName } from '../../types/types';\nimport styles from './Names.module.scss';\n\ninterface IProps {\n  variant: string;\n  person: IName;\n}\n\nfunction NameItem({ variant, person }: IProps) {\n  return <li className={styles[`nameItem__${variant}`]}>{person.name}</li>;\n}\n\nexport default NameItem;\n","import React from 'react';\nimport NameItem from './NameItem';\nimport { IName } from '../../types/types';\nimport styles from './Names.module.scss';\n\ninterface IProps {\n  variant: string;\n  people: IName[];\n}\n\nfunction NameList({ variant, people }: IProps) {\n  if (variant === 'chosenGroup' && people.length === 0) return null;\n\n  return (\n    <div className={styles[`nameList__${variant}`]}>\n      {people.length > 0 ? (\n        <ul>\n          {people.map((person: IName) => (\n            <NameItem variant={variant} key={person.id} person={person} />\n          ))}\n        </ul>\n      ) : (\n        <p>Group is empty</p>\n      )}\n    </div>\n  );\n}\n\nexport default NameList;\n","import React, { useEffect, useState } from 'react';\nimport NameList from './NameList';\nimport { IGroup } from '../../types/types';\nimport styles from './Groups.module.scss';\n\ninterface IProps {\n  variant: string;\n  group: IGroup;\n  showNames: boolean;\n  chooseGroup: (groupID: string) => void;\n}\n\nfunction GroupItem({ variant, group, showNames, chooseGroup }: IProps) {\n  const [isOpen, setIsOpen] = useState(true);\n\n  useEffect(() => {\n    setIsOpen(showNames);\n  }, []);\n\n  if (!group) return null;\n\n  return (\n    <li className={styles[`groupItem__${variant}`]}>\n      <h3>{group.groupName}</h3>\n      <div>\n        <button type=\"button\" className=\"primaryBtn\" onClick={() => chooseGroup(group.id)}>\n          Choose Group\n        </button>\n        <button type=\"button\" className=\"secondaryBtn\" onClick={() => setIsOpen(!isOpen)}>\n          {isOpen ? 'Hide Members' : 'Show Members'}\n        </button>\n      </div>\n      {isOpen && <NameList variant={variant} key={group.id} people={group.people} />}\n    </li>\n  );\n}\n\nexport default GroupItem;\n","import React from 'react';\nimport GroupItem from './GroupItem';\nimport { IGroup } from '../../types/types';\nimport styles from './Groups.module.scss';\n\ninterface IProps {\n  variant: string;\n  groups: IGroup[];\n  showNames: boolean;\n  chooseGroup: (groupID: string) => void;\n}\n\nfunction GroupList({ variant, groups, showNames, chooseGroup }: IProps) {\n  return (\n    <div className={styles[`groupList__${variant}`]}>\n      <h2>Choose a Group</h2>\n      {groups.length > 0 ? (\n        <ul>\n          {groups.map((group: IGroup) => (\n            <GroupItem variant={variant} key={group.id} group={group} showNames={showNames} chooseGroup={chooseGroup} />\n          ))}\n        </ul>\n      ) : (\n        <p>No groups</p>\n      )}\n    </div>\n  );\n}\n\nexport default GroupList;\n","import { v4 as uuidv4 } from 'uuid';\nimport { IName, IGroup } from '../types/types';\n\nfunction createGroup(groupName: string): IGroup {\n  const sanitizedGroupName = groupName.trim();\n\n  if (sanitizedGroupName.length === 0) {\n    throw new Error('Group name cannot be empty');\n  }\n\n  const newGroup: IGroup = {\n    id: uuidv4(),\n    groupName: sanitizedGroupName,\n    people: [],\n  };\n\n  return newGroup;\n}\n\nfunction createPerson(name: string): IName {\n  const sanitizedName = name.trim();\n\n  if (sanitizedName.length === 0) {\n    throw new Error('Name cannot be empty');\n  }\n\n  const newPerson: IName = {\n    id: uuidv4(),\n    name: sanitizedName,\n  };\n\n  return newPerson;\n}\n\nfunction addPersonToGroup(name: string, groupID: string, groups: IGroup[]): IGroup[] {\n  const newPerson = createPerson(name);\n  const updatedGroups = groups.map((group: IGroup) => {\n    if (group.id === groupID) {\n      return {\n        ...group,\n        people: [...group.people, newPerson],\n      };\n    }\n    return group;\n  });\n\n  return updatedGroups;\n}\n\nexport default {\n  createGroup,\n  addPersonToGroup,\n};\n","import React, { useState, useEffect } from 'react';\nimport { IName } from '../../types/types';\nimport styles from './Randomizer.module.scss';\n\ninterface IProps {\n  names: IName[];\n}\n\nfunction NameRandomizer({ names }: IProps) {\n  const [randomName, setRandomName] = useState<string>('');\n  const [remainingNames, setRemainingNames] = useState<IName[]>([]);\n  const [isUniqueOnly, setIsUniqueOnly] = useState<boolean>(false);\n\n  useEffect(() => {\n    setRemainingNames(names);\n  }, []);\n\n  const getRandomName = () => {\n    let chosenName: IName = {\n      id: '',\n      name: '',\n    };\n\n    if (isUniqueOnly) {\n      const randomIndex = Math.floor(Math.random() * remainingNames.length);\n      chosenName = remainingNames[randomIndex];\n      const updatedRemainingNames = remainingNames.filter((name: IName) => name.id !== chosenName.id);\n      setRemainingNames(updatedRemainingNames);\n    } else {\n      const randomIndex = Math.floor(Math.random() * names.length);\n      chosenName = names[randomIndex];\n    }\n    setRandomName(chosenName.name);\n  };\n\n  const resetNames = () => {\n    setRemainingNames(names);\n    setRandomName('');\n  };\n\n  return (\n    <div className={styles.nameRandomizer}>\n      <h2>{randomName || 'Click START to get a random name'}</h2>\n\n      {remainingNames.length ? (\n        <button className=\"primaryBtn\" type=\"button\" onClick={getRandomName}>\n          START\n        </button>\n      ) : (\n        <button className=\"primaryBtn\" type=\"button\" onClick={resetNames}>\n          RESET\n        </button>\n      )}\n\n      <label htmlFor=\"uniqueOnly\">\n        <input type=\"checkbox\" id=\"uniqueOnly\" checked={isUniqueOnly} onChange={() => setIsUniqueOnly(!isUniqueOnly)} />\n        Use names only once\n      </label>\n    </div>\n  );\n}\n\nexport default NameRandomizer;\n","import React, { useState, useEffect } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { Link } from 'react-router-dom';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport NameForm from '../../components/forms/NameForm';\nimport TempNameForm from '../../components/forms/TempNameForm';\nimport GroupList from '../../components/lists/GroupList';\nimport helpers from '../../helpers/groupHelpers';\nimport { IName, IGroup } from '../../types/types';\nimport NameList from '../../components/lists/NameList';\nimport NameRandomizer from '../../components/randomizers/NameRandomizer';\nimport styles from './RandomName.module.scss';\n\nconst { addPersonToGroup } = helpers;\n\nconst emptyGroup: IGroup = {\n  id: '',\n  groupName: '',\n  people: [],\n};\n\nfunction RandomName() {\n  const [groups, setGroups] = useState<IGroup[]>([]);\n  const [chosenGroup, setChosenGroup] = useState<IGroup>(emptyGroup);\n  const [tempGroup, setTempGroup] = useState<IGroup>(emptyGroup);\n  const [isTempGroup, setIsTempGroup] = useState<boolean>(true);\n\n  useEffect(() => {\n    const groupsInStorage = localStorage.getItem('groups');\n    if (groupsInStorage) {\n      setGroups(JSON.parse(groupsInStorage));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (groups.length) {\n      localStorage.setItem('groups', JSON.stringify(groups));\n    }\n  }, [groups]);\n\n  useEffect(() => {\n    const tempGroupInStorage = localStorage.getItem('tempGroup');\n    if (tempGroupInStorage) {\n      setTempGroup(JSON.parse(tempGroupInStorage));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (tempGroup) {\n      localStorage.setItem('tempGroup', JSON.stringify(tempGroup));\n    }\n  }, [tempGroup]);\n\n  const submitName = (name: string) => {\n    const sanitizedName = name.trim();\n\n    if (sanitizedName.length) {\n      const newPerson = {\n        id: uuidv4(),\n        name: sanitizedName,\n      };\n\n      setTempGroup({\n        ...tempGroup,\n        people: [...tempGroup.people, newPerson],\n      });\n    }\n  };\n\n  const chooseGroup = (groupID: string) => {\n    const specificGroup = groups.filter((group: IGroup) => group.id === groupID)[0];\n    setChosenGroup(specificGroup);\n    setIsTempGroup(false);\n  };\n\n  return (\n    <div className={styles.randomName}>\n      <Link to=\"/\">\n        <div>\n          <FiArrowLeft />\n          Back to home\n        </div>\n      </Link>\n      <h1>Random Name</h1>\n\n      {groups.length > 0 ? (\n        <GroupList variant=\"default\" groups={groups} showNames={false} chooseGroup={chooseGroup} />\n      ) : (\n        <div>\n          <p>No groups saved.</p>\n          <Link to=\"/manage-groups\">Click here to add a new group</Link>\n        </div>\n      )}\n\n      {isTempGroup ? (\n        <div>\n          <h2>OR Add Names to a Temporary List</h2>\n          <TempNameForm submitName={submitName} />\n          <NameList variant=\"chosenGroup\" people={tempGroup.people} />\n          <NameRandomizer names={tempGroup.people} />\n        </div>\n      ) : (\n        <div>\n          <NameList variant=\"chosenGroup\" people={chosenGroup.people} />\n          <NameRandomizer names={chosenGroup.people} />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RandomName;\n","import React from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { IName } from '../../types/types';\nimport styles from './Groups.module.scss';\n\ninterface IProps {\n  groups: IName[][];\n}\n\nfunction RandomGroupList({ groups }: IProps) {\n  return (\n    <div className={styles.randomGroups}>\n      {groups.length ? (\n        <ul className={styles.randomGroupsList}>\n          {groups.map((group: IName[], index: number) => {\n            return (\n              <li className={styles.groupCard} key={uuidv4()}>\n                <h2>Group {index + 1}</h2>\n                <ul className={styles.groupMemberList}>\n                  {group.map((person) => (\n                    <li key={person.id}>{person.name}</li>\n                  ))}\n                </ul>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p />\n      )}\n    </div>\n  );\n}\n\nexport default RandomGroupList;\n","import React, { useState, useEffect, ChangeEvent, FormEvent } from 'react';\nimport { IGroup } from '../../types/types';\nimport styles from './Randomizer.module.scss';\n\ninterface IProps {\n  chosenGroup: IGroup;\n  updateGroupSize: (size: string) => void;\n}\n\nfunction GroupRandomizer({ chosenGroup, updateGroupSize }: IProps) {\n  const [groupSize, setGroupSize] = useState<string>('');\n  const [showError, setShowError] = useState<boolean>(false);\n  const [errorMessage, setErrorMessage] = useState<string>('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    const { value } = e.target;\n    setShowError(false);\n    setErrorMessage('');\n\n    if (Number(value) >= chosenGroup.people.length) {\n      setErrorMessage('Number must be less than group members');\n      setShowError(true);\n      return;\n    }\n\n    setGroupSize(value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (Number(groupSize) < chosenGroup.people.length) {\n      updateGroupSize(groupSize);\n      setGroupSize('');\n    } else {\n      alert('Error: Something went wrong...');\n    }\n  };\n\n  return (\n    <div className={styles.groupRandomizer}>\n      <h2>Enter a Group Size</h2>\n      <form onSubmit={handleSubmit}>\n        <label htmlFor=\"groupSize\">\n          Group Size\n          <input type=\"number\" id=\"groupSize\" value={groupSize} onChange={handleChange} required />\n        </label>\n        <p>{showError && errorMessage}</p>\n        <button type=\"submit\">START</button>\n      </form>\n    </div>\n  );\n}\n\nexport default GroupRandomizer;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport GroupList from '../../components/lists/GroupList';\nimport NameList from '../../components/lists/NameList';\nimport RandomGroupList from '../../components/lists/RandomGroupList';\nimport GroupRandomizer from '../../components/randomizers/GroupRandomizer';\nimport { IName, IGroup } from '../../types/types';\nimport styles from './RandomGroup.module.scss';\n\nconst emptyGroup: IGroup = {\n  id: '',\n  groupName: '',\n  people: [],\n};\n\nfunction RandomGroups() {\n  const [groups, setGroups] = useState<IGroup[]>([]);\n  const [chosenGroup, setChosenGroup] = useState<IGroup>(emptyGroup);\n  const [randomGroups, setRandomGroups] = useState<IName[][]>([]);\n  const [groupSize, setGroupSize] = useState<string>('');\n\n  useEffect(() => {\n    const groupsInStorage = localStorage.getItem('groups');\n    if (groupsInStorage && groupsInStorage.length > 0) {\n      setGroups(JSON.parse(groupsInStorage));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (groups.length) {\n      localStorage.setItem('groups', JSON.stringify(groups));\n    }\n  }, [groups]);\n\n  const shuffleArray = (array: IName[]) => {\n    let currentIndex: number = array.length;\n    let randomIndex: number;\n\n    const randomArray = [...array];\n\n    while (currentIndex !== 0) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      [randomArray[currentIndex], randomArray[randomIndex]] = [randomArray[randomIndex], randomArray[currentIndex]];\n    }\n    return randomArray;\n  };\n\n  const getRandomGroups = (size: number) => {\n    if (!chosenGroup) return;\n    const randomArray: IName[] = shuffleArray(chosenGroup.people);\n    const randomGroupsArray: IName[][] = [];\n\n    while (randomArray.length) {\n      if (randomArray.length > size) {\n        const newGroup = randomArray.splice(0, size);\n        randomGroupsArray.push(newGroup);\n      } else {\n        randomGroupsArray.push(randomArray);\n        break;\n      }\n    }\n\n    setRandomGroups(randomGroupsArray);\n  };\n\n  const updateGroupSize = (size: string) => {\n    setGroupSize(size);\n    getRandomGroups(Number(size));\n  };\n\n  const chooseGroup = (groupID: string) => {\n    const specificGroup = groups.filter((group: IGroup) => group.id === groupID)[0];\n    setChosenGroup(specificGroup);\n  };\n\n  return (\n    <div className={styles.randomGroup}>\n      <Link to=\"/\">\n        <div>\n          <FiArrowLeft />\n          Back to home\n        </div>\n      </Link>\n      <h1>Random Groups</h1>\n      {groups.length > 0 ? (\n        <div className={styles.groupSelectionArea}>\n          <GroupList variant=\"default\" groups={groups} showNames={false} chooseGroup={chooseGroup} />\n          <GroupRandomizer chosenGroup={chosenGroup} updateGroupSize={updateGroupSize} />\n          {randomGroups.length ? (\n            <RandomGroupList groups={randomGroups} />\n          ) : (\n            <NameList variant=\"chosenGroup\" people={chosenGroup.people} />\n          )}\n        </div>\n      ) : (\n        <div>\n          <p>No groups saved.</p>\n          <Link to=\"/manage-groups\">Click here to add a new group</Link>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default RandomGroups;\n","import React, { ChangeEvent, FormEvent, useState } from 'react';\n\ninterface IProps {\n  submitGroup: (groupName: string) => void;\n}\n\nfunction GroupForm({ submitGroup }: IProps) {\n  const [groupName, setGroupName] = useState('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setGroupName(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    submitGroup(groupName);\n    setGroupName('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"groupName\">\n        Group Name\n        <input type=\"text\" name=\"groupName\" id=\"groupName\" value={groupName} onChange={handleChange} />\n      </label>\n      <button type=\"submit\">Add Group</button>\n    </form>\n  );\n}\n\nexport default GroupForm;\n","import React, { useState, ChangeEvent, FormEvent } from 'react';\nimport { IGroup } from '../../types/types';\n\ninterface IProps {\n  groups: IGroup[];\n  submitName: (name: string, groupID: string) => void;\n}\n\nfunction NameForm({ groups, submitName }: IProps) {\n  const [name, setName] = useState<string>('');\n  const [assignedGroupID, setAssignedGroupID] = useState<string>('');\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value);\n  };\n\n  const handleSelect = (e: ChangeEvent<HTMLSelectElement>) => {\n    setAssignedGroupID(e.target.value);\n  };\n\n  const handleSubmit = (e: FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    submitName(name, assignedGroupID);\n    setName('');\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label htmlFor=\"name\">\n        Name\n        <input type=\"text\" name=\"name\" id=\"name\" value={name} onChange={handleChange} />\n      </label>\n\n      <label htmlFor=\"assignedGroup\">\n        Assign to Group\n        <select name=\"assignedGroup\" id=\"assignedGroup\" value={assignedGroupID} onChange={handleSelect}>\n          <option value=\"\">Select a group</option>\n          {groups.map((group) => (\n            <option key={group.id} value={group.id}>\n              {group.groupName}\n            </option>\n          ))}\n        </select>\n      </label>\n\n      <button type=\"submit\">Submit</button>\n    </form>\n  );\n}\n\nexport default NameForm;\n","import React from 'react';\nimport { AiOutlineUserDelete } from 'react-icons/ai';\nimport { IName } from '../../types/types';\nimport styles from './Names.module.scss';\n\ninterface IProps {\n  person: IName;\n  deleteNameFromGroup: (nameID: string) => void;\n}\n\nfunction NameItemAdmin({ person, deleteNameFromGroup }: IProps) {\n  const handleClick = () => {\n    deleteNameFromGroup(person.id);\n  };\n\n  return (\n    <li className={styles.nameItemAdmin}>\n      <AiOutlineUserDelete className={styles.deleteIcon} onClick={handleClick} />\n      <span>{person.name}</span>\n    </li>\n  );\n}\n\nexport default NameItemAdmin;\n","import React from 'react';\nimport { IName } from '../../types/types';\nimport NameItemAdmin from './NameItemAdmin';\nimport styles from './Names.module.scss';\n\ninterface IProps {\n  people: IName[];\n  deleteNameFromGroup: (nameID: string) => void;\n}\n\nfunction NameListAdmin({ people, deleteNameFromGroup }: IProps) {\n  return (\n    <div className={styles.nameListAdmin}>\n      {people.length > 0 ? (\n        <ul>\n          {people.map((person: IName) => (\n            <NameItemAdmin key={person.id} person={person} deleteNameFromGroup={deleteNameFromGroup} />\n          ))}\n        </ul>\n      ) : (\n        <p>Group is empty</p>\n      )}\n    </div>\n  );\n}\n\nexport default NameListAdmin;\n","import React, { useState } from 'react';\nimport { AiOutlineUsergroupDelete } from 'react-icons/ai';\nimport { IGroup } from '../../types/types';\nimport NameListAdmin from './NameListAdmin';\nimport styles from './Groups.module.scss';\n\ninterface IProps {\n  group: IGroup;\n  deleteGroup: (id: string) => void;\n  deleteNameFromGroup: (nameID: string) => void;\n}\n\nfunction GroupItemAdmin({ group, deleteGroup, deleteNameFromGroup }: IProps) {\n  const [isOpen, setIsOpen] = useState(false);\n\n  if (!group) return null;\n\n  return (\n    <li className={styles.groupItemAdmin}>\n      <div className={styles.groupHeader}>\n        <AiOutlineUsergroupDelete className={styles.deleteIcon} onClick={() => deleteGroup(group.id)} />\n        <h3>{group.groupName}</h3>\n      </div>\n      <button className=\"secondaryBtn\" type=\"button\" onClick={() => setIsOpen(!isOpen)}>\n        {isOpen ? 'Hide Members' : 'Show Members'}\n      </button>\n      {isOpen && <NameListAdmin key={group.id} people={group.people} deleteNameFromGroup={deleteNameFromGroup} />}\n    </li>\n  );\n}\n\nexport default GroupItemAdmin;\n","import React from 'react';\nimport { IGroup } from '../../types/types';\nimport GroupItemAdmin from './GroupItemAdmin';\nimport styles from './Groups.module.scss';\n\ninterface IProps {\n  groups: IGroup[];\n  deleteGroup: (id: string) => void;\n  deleteNameFromGroup: (nameID: string) => void;\n}\n\nfunction GroupListAdmin({ groups, deleteGroup, deleteNameFromGroup }: IProps) {\n  return (\n    <div className={styles.groupListAdmin}>\n      <h2>Groups</h2>\n      {groups.length > 0 ? (\n        <ul>\n          {groups.map((group: IGroup) => (\n            <GroupItemAdmin\n              key={group.id}\n              group={group}\n              deleteGroup={deleteGroup}\n              deleteNameFromGroup={deleteNameFromGroup}\n            />\n          ))}\n        </ul>\n      ) : (\n        <p>No groups</p>\n      )}\n    </div>\n  );\n}\n\nexport default GroupListAdmin;\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { FiArrowLeft } from 'react-icons/fi';\nimport GroupForm from '../../components/forms/GroupForm';\nimport NameForm from '../../components/forms/NameForm';\nimport GroupListAdmin from '../../components/lists/GroupListAdmin';\nimport { IName, IGroup } from '../../types/types';\nimport helpers from '../../helpers/groupHelpers';\nimport styles from './ManageGroups.module.scss';\n\nconst { createGroup, addPersonToGroup } = helpers;\n\nfunction ManageGroups() {\n  const [groups, setGroups] = useState<IGroup[]>([]);\n\n  useEffect(() => {\n    const groupsInStorage = localStorage.getItem('groups');\n    if (groupsInStorage) {\n      setGroups(JSON.parse(groupsInStorage));\n    }\n  }, []);\n\n  useEffect(() => {\n    if (groups.length) {\n      localStorage.setItem('groups', JSON.stringify(groups));\n    }\n  }, [groups]);\n\n  const submitGroup = (groupName: string): void => {\n    const newGroup: IGroup = createGroup(groupName);\n    setGroups([...groups, newGroup]);\n  };\n\n  const submitName = (name: string, groupID: string) => {\n    const updatedGroups = addPersonToGroup(name, groupID, groups);\n    setGroups(updatedGroups);\n  };\n\n  const deleteGroup = (groupID: string) => {\n    const newGroups: IGroup[] = groups.filter((group: IGroup) => group.id !== groupID);\n\n    if (newGroups.length) {\n      setGroups(newGroups);\n    } else {\n      setGroups([]);\n      localStorage.removeItem('groups');\n    }\n  };\n\n  const deleteNameFromGroup = (nameID: string) => {\n    const updatedGroups = groups.map((group: IGroup) => {\n      const newPeople = group.people.filter((person: IName) => person.id !== nameID);\n      return { ...group, people: newPeople };\n    });\n\n    setGroups(updatedGroups);\n  };\n\n  return (\n    <div className={styles.manageGroups}>\n      <Link to=\"/\">\n        <div>\n          <FiArrowLeft />\n          Back to home\n        </div>\n      </Link>\n      <h1>Your Groups</h1>\n\n      <div>\n        <h2>New Group</h2>\n        <GroupForm submitGroup={submitGroup} />\n      </div>\n\n      <div>\n        <h2>New Name</h2>\n        <NameForm groups={groups} submitName={submitName} />\n      </div>\n\n      <GroupListAdmin groups={groups} deleteGroup={deleteGroup} deleteNameFromGroup={deleteNameFromGroup} />\n    </div>\n  );\n}\n\nexport default ManageGroups;\n","import React from 'react';\n\nfunction Tutorial() {\n  return (\n    <div>\n      <h1>How it works</h1>\n    </div>\n  );\n}\n\nexport default Tutorial;\n","import React from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\nimport NotFound from '../pages/404/NotFound';\nimport Home from '../pages/home/Home';\nimport RandomName from '../pages/random-name/RandomName';\nimport RandomGroups from '../pages/random-group/RandomGroups';\nimport ManageGroups from '../pages/manage-groups/ManageGroups';\nimport Tutorial from '../pages/tutorial/Tutorial';\n\nfunction Router() {\n  return (\n    <BrowserRouter>\n      <Routes>\n        <Route path=\"*\" element={<NotFound />} />\n        <Route path=\"/\" element={<Home />} />\n        <Route path=\"/random-groups\" element={<RandomGroups />} />\n        <Route path=\"/random-name\" element={<RandomName />} />\n        <Route path=\"/manage-groups\" element={<ManageGroups />} />\n        <Route path=\"/how-it-works\" element={<Tutorial />} />\n      </Routes>\n    </BrowserRouter>\n  );\n}\n\nexport default Router;\n","import React, { useState, useEffect } from 'react';\nimport Router from './router/Router';\nimport { IGroup } from './types/types';\n\nfunction App() {\n  const [groups, setGroups] = useState<IGroup[]>([]);\n\n  useEffect(() => {\n    const groupsInStorage = localStorage.getItem('groups');\n    if (groupsInStorage) {\n      setGroups(JSON.parse(groupsInStorage));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem('groups', JSON.stringify(groups));\n  }, [groups]);\n\n  const addGroup = (group: IGroup): void => {\n    setGroups([...groups, group]);\n  };\n\n  const deleteGroup = (id: string): void => {\n    setGroups(groups.filter((group) => group.id !== id));\n  };\n\n  const updateGroup = (newGroups: IGroup[]): void => {\n    console.log(newGroups);\n    setGroups(newGroups);\n  };\n\n  const removeUserFromGroup = (userID: string, groupID: string): void => {\n    const newGroups = groups.map((group) => {\n      if (group.id === groupID) {\n        group.people = group.people.filter((person) => person.id !== userID); // eslint-disable-line\n      }\n      return group;\n    });\n    updateGroup(newGroups);\n  };\n\n  const groupActions = {\n    addGroup,\n    deleteGroup,\n    updateGroup,\n    removeUserFromGroup,\n  };\n\n  return <Router />;\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}